#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'cuda'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/cuda` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/cuda now"
  exit 64
end

include GLI::App

program_desc 'Cuda is a server and client that uses socket to communication. Cuda client allows you to request a html file to the server and it will parse and retrieve all assets asynchronously.'

version Cuda::VERSION

desc 'Request a file to the server'
arg_name 'uri'
command :get do |c|

  c.desc 'URL'
  c.arg_name 'http://localhost:3000/index.html'
  c.default_value 'http://localhost:3000/index.html'
  c.flag [:u,:url]

  c.action do |global_options,options,args|
    Cuda::Client.new(options[:url])
  end
end

desc 'Start the server.'
command :start do |c|

  c.desc 'Port to the server start'
  c.arg_name '5000'
  c.default_value 3000
  c.flag [:p,:port]

  c.desc 'Directory to the server list'
  c.arg_name '/path/other/'
  c.default_value Dir.pwd
  c.flag [:d,:dir]


  c.action do |global_options,options,args|
    puts "Server starting in port #{options[:p]}"
    puts "Directory: #{options[:dir]}"
    $dir = options[:dir]
    Cuda::Server.new(options[:dir], options[:p])
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  puts exception.inspect
  puts exception.backtrace
  puts STDERR
  true
end

exit run(ARGV)
